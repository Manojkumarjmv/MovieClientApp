@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using MovieLibrary.Client.Models
@inject MovieLibrary.Client.Services.MovieService movieService

<div class="container mt-4">
<div class="row">
 <div class="col-sm-6">
  <h3 class="mb-4 text-primary">ðŸŽ¬ Movie Library</h3>
  </div>
 <div class="col-sm-6">
  <a href="/add" class="btn btn-sm btn-outline-primary">
                        Add Movie <i class="bi bi-plus-circle"></i>
                    </a>
 </div>
</div>

   

    <div class="mb-4">
        <!-- <input type="text" @bind="searchTerm" @oninput="HandleSearchInput"
               class="form-control form-control-lg"
               placeholder="Search by name, genre, actor..." /> -->

         <input type="text" @bind="searchTerm" @bind:event="oninput"
               class="form-control form-control-lg"
               placeholder="Search by name, genre, actor..." />


    </div>

    <div class="row">
@foreach (var movie in FilteredMovies)
{
    <div class="col-sm-6 col-lg-4 mb-4">
        <div class="card h-100 border-0 shadow-lg">
            <img src="@movie.PosterUrl" class="card-img-top rounded-top w-100" alt="@movie.Name"
                 style="height: 100%; max-height: 200px object-fit: cover;" />

            <div class="card-body d-flex flex-column">
                <h5 class="card-title fw-bold text-primary">@movie.Name</h5>
                <p class="card-text text-muted small">@movie.Description</p>

                <ul class="list-unstyled mb-3">
                    <li><strong>ðŸŽ¬ Genre:</strong> @movie.Genre</li>
                    <li><strong>ðŸŽ­ Actors:</strong> @string.Join(", ", movie.Actors)</li>
                    <li><strong>ðŸ“… Released:</strong> @movie.ReleaseDate.ToShortDateString()</li>
                </ul>

                <div class="mt-auto d-flex justify-content-between">
                    <a href="/edit/@movie.Id" class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-pencil-square"></i> Edit
                    </a>
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteMovie(movie.Id)">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}
    </div>
</div>

@code {
    private List<Movie> movies = new();
    public string searchTerm { get; set; } = "";
<!-- 
        private string _searchTerm = "";
        public string searchTerm
        {
            get => _searchTerm;
            set
            {
                _searchTerm = value;
                 StateHasChanged();
                Console.WriteLine($"Search updated: {_searchTerm}");
            }
        } -->

    protected override async Task OnInitializedAsync()
    {
        movies = await movieService.GetMoviesAsync();
        movies ??= new List<Movie>();
        movies = movies.OrderByDescending(m => m.ReleaseDate).ToList();
    }

    private List<Movie> FilteredMovies =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? movies
            : movies.Where(m =>
                m.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                m.Genre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                m.Actors.Any(actor => actor.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();

    private async Task DeleteMovie(Guid id)
    {
        Console.WriteLine($"Deleting movie with ID: {id}"); 
        await movieService.DeleteMovieAsync(id);
        movies = movies.Where(m => m.Id != id).ToList();
    }
    private void AddMovie(Movie movie)
    {
        Console.WriteLine("Navigating to Add Movie page");
        NavigationManager.NavigateTo("/add");
    }
}